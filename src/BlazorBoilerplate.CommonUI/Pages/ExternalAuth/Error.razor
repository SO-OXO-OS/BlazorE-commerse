@page "/externalauth/error/{ErrorEnumValue}"
@page "/externalauth/error/{ErrorEnumValue}/{Description}"

@inject NavigationManager navigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster

    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="row" id="error-page">
                    <div class="col-md-6 mx-auto">
                        <div class="box text-center py-5">
                            <p class="text-center"><img alt="Obaju template" src="img/logo.png"></p>
                            <h3>External authentication error</h3>
                            <p>@errorText</p>
                            <p>@Description</p>                            
                            <p class="buttons"><NavLink class="btn btn-primary" href="/"><i class="fa fa-home"></i> Go to Homepage</NavLink></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    


@code {

    [Parameter]
    public string ErrorEnumValue { get; set; }

    [Parameter]
    public string Description { get; set; }

    ErrorEnum error =  ErrorEnum.Unknown;
    string errorText;


    protected override void OnInitialized()
    {
        var result = Enum.TryParse(ErrorEnumValue, out error);
        if (result == false)
            error = ErrorEnum.Unknown;

        switch (error)
        {
            case ErrorEnum.UserCreationFailed: errorText = "User cannot be created"; break;
            case ErrorEnum.UserIsNotAllowed: errorText = "Login not allowed, check email inbox for account confirmation"; break;
            case ErrorEnum.UserLockedOut: errorText = "User is locked out"; break;
            case ErrorEnum.CannotAddExternalLogin: errorText = "Cannot create binding for this external login provider to the account"; break;
            case ErrorEnum.ExternalAuthError: errorText = "External auhentication error"; break;
            case ErrorEnum.ExternalUnknownUserId: errorText = "External authentication provider did not pass user identifier"; break;
            case ErrorEnum.ProviderNotFound: errorText = "Choosen provider has not been found/configured"; break;
            case ErrorEnum.Domain: errorText = string.Empty; break;
            case ErrorEnum.Unknown: errorText = "Unknown reason"; break;
            default: errorText = "Unknown reason"; break;
        }

    }

}
