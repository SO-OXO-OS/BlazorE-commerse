@page "/account/login"
@page "/account/login/{returnurl}"

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState
@inject NavigationManager NavigationManager
@inject IJSRuntime js

<div class="container">
    <div class="row">
        <div class="col-lg-12">
            <div class="box">
                <MatCard>
                    <div class="logo">
                        <a href="/" title="Obaju Home"><img src="/img/logo.png" style="width:100px;" title="Obaju Home" alt="Blazor Boilerplate" /><br /></a>
                        <br />
                        <h4>Log In</h4>
                    </div>
                    <EditForm Model="@loginParameters" OnValidSubmit="@SubmitLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <fieldset>
                            <div class="form-group">
                                <MatTextField id="userName" @bind-Value="@loginParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                            </div>
                            <div class="form-group">
                                <MatTextField @bind-Value="@loginParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                            </div>
                            <div class="form-group">
                                <MatCheckbox @bind-Value="@loginParameters.RememberMe" class="filled-in chk-col-blue">Remember Me</MatCheckbox>
                                <MatButton class="float-right" Type="submit" Raised="true">Login</MatButton>
                            </div>
                            <hr />
                            <div>
                                <MatButton class="float-left" OnClick="@Register" Raised="true">Create account</MatButton>
                                <MatButton class="float-right" OnClick="@GoogleSignIn" Raised="true">Sign in with <img height="18" style="margin-left: 5px" src="https://www.google.pl/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png" /></MatButton><br />
                            </div>
                        </fieldset>
                    </EditForm>
                </MatCard>
                <MatAccordion>
                    <MatExpansionPanel @bind-Expanded="@forgotPasswordToggle">
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>Forgot Password?</MatExpansionPanelHeader>
                            <MatExpansionPanelSubHeader></MatExpansionPanelSubHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <EditForm Model="@forgotPasswordParameters" OnValidSubmit="@ForgotPassword">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="form-group">
                                    <MatTextField @bind-Value="@forgotPasswordParameters.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                                </div>
                                <div class="form-group">
                                    <MatButton class="float-right" Type="submit" Raised="true">Submit</MatButton>
                                </div>
                            </EditForm>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>
            </div>
        
        </div>
    </div>
</div>
@code {

    string navigateTo = "";
    bool forgotPasswordToggle = false;
    LoginDto loginParameters { get; set; } = new LoginDto();
    ForgotPasswordDto forgotPasswordParameters { get; set; } = new ForgotPasswordDto();

    [Parameter]
    public string ReturnUrl { get; set; }

    private void GoBack()
    {
        if (string.IsNullOrEmpty(ReturnUrl))
            ReturnUrl = "";
        NavigationManager.NavigateTo(ReturnUrl, forceLoad: false);
    }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo(navigationManager.BaseUri + navigateTo);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("SetFocus", "userName");
        await base.OnAfterRenderAsync(firstRender);
    }

    void GoogleSignIn()
    {
        navigationManager.NavigateTo(navigationManager.BaseUri + "api/externalauth/challenge/google", true);
    }

    void Register()
    {
        navigationManager.NavigateTo("/account/register");
    }

    async Task SubmitLogin()
    {
        try
        {
            var response = await ((IdentityAuthenticationStateProvider)authStateProvider).Login(loginParameters);
            if (response.StatusCode == 200)
            {
                // On successful Login the response.Message is the Last Page Visited from User Profile
                // We can't navigate yet as the setup is proceeding asynchronously
                if (!string.IsNullOrEmpty(response.Message))
                {
                    navigateTo = response.Message;
                }
                else
                {
                    navigateTo = "/dashboard";
                }
            }
            else
            {
                matToaster.Add(response.Message, MatToastType.Danger, "Login Attempt Failed");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Login Attempt Failed");
        }
    }

    async Task ForgotPassword()
    {
        try
        {
            await ((IdentityAuthenticationStateProvider)authStateProvider).ForgotPassword(forgotPasswordParameters);
            matToaster.Add("Forgot Password Email Sent", MatToastType.Success);
            forgotPasswordParameters.Email = "";
            forgotPasswordToggle = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Reset Password Attempt Failed");
        }
    }
}
